{
	"name": "PatientJSON_Flatten_large",
	"properties": {
		"folder": {
			"name": "Patient"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PatientRawParquetLarge",
						"type": "DatasetReference"
					},
					"name": "PatientNDJSON"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "PatientIdentifierParquetLarge",
						"type": "DatasetReference"
					},
					"name": "sinkPatientIdentifier"
				},
				{
					"dataset": {
						"referenceName": "PatientExtensionParquetLarge",
						"type": "DatasetReference"
					},
					"name": "sinkPatientExtension"
				},
				{
					"dataset": {
						"referenceName": "PatientAddressParquetLarge",
						"type": "DatasetReference"
					},
					"name": "sinkPatientAddress"
				}
			],
			"transformations": [
				{
					"name": "PatientIdentifierFlatten"
				},
				{
					"name": "PatientExtensionFlatten"
				},
				{
					"name": "PatientAddressFlatten"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PatientNDJSON",
				"PatientNDJSON foldDown(unroll(identifier.type.coding),",
				"     mapColumn(",
				"          patient_id = id,",
				"          birthDate,",
				"          deceasedDateTime,",
				"          gender,",
				"          text = maritalStatus.text,",
				"          multipleBirthBoolean,",
				"          multipleBirthInteger,",
				"          resourceType,",
				"          div = text.div,",
				"          status = text.status,",
				"          {identifier.system} = identifier.system,",
				"          {identifier.type.coding.code} = identifier.type.coding.code,",
				"          {identifier.type.coding.display} = identifier.type.coding.display,",
				"          {identifier.type.coding.system} = identifier.type.coding.system,",
				"          {identifier.type.text} = identifier.type.text,",
				"          {identifier.value} = identifier.value",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> PatientIdentifierFlatten",
				"PatientNDJSON foldDown(unroll(extension),",
				"     mapColumn(",
				"          patient_id = id,",
				"          url = extension.url,",
				"          {extension.valueAddress.city} = extension.valueAddress.city,",
				"          {extension.valueAddress.country} = extension.valueAddress.country,",
				"          {extension.valueAddress.state} = extension.valueAddress.state,",
				"          {extension.valueDecimal} = extension.valueDecimal,",
				"          {extension.valueString} = extension.valueString",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> PatientExtensionFlatten",
				"PatientNDJSON foldDown(unroll(address.extension.extension),",
				"     mapColumn(",
				"          id,",
				"          {address.city} = address.city,",
				"          {address.country} = address.country,",
				"          {address.extension.extension.url} = address.extension.extension.url,",
				"          {address.extension.extension.valueDecimal} = address.extension.extension.valueDecimal,",
				"          {address.extension.url} = address.extension.url,",
				"          {address.postalCode} = address.postalCode,",
				"          {address.state} = address.state",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: false) ~> PatientAddressFlatten",
				"PatientIdentifierFlatten sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkPatientIdentifier",
				"PatientExtensionFlatten sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkPatientExtension",
				"PatientAddressFlatten sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkPatientAddress"
			]
		}
	}
}