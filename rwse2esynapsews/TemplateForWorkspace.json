{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "rwse2esynapsews"
		},
		"SynapseDedicatedPoolLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SynapseDedicatedPoolLS'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=\"@{concat(linkedService().ServerName,'.sql.azuresynapse.net')}\";Initial Catalog=@{linkedService().DatabaseName}"
		},
		"rwse2esynapsews-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'rwse2esynapsews-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:rwse2esynapsews.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"Source_Dataset_LS_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'Source_Dataset_LS'"
		},
		"StorageLS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://',linkedService().StorageName,'.dfs.core.windows.net')}"
		},
		"rwse2esynapsews-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rwse2estorage.dfs.core.windows.net/"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Copy_Data_Source_To_Raw_PL')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy Source Data To Raw Container",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_DataPrep_DS",
								"type": "DatasetReference",
								"parameters": {
									"DatasetSize": {
										"value": "@pipeline().parameters.DatasetSize",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Sink_DataPrep_DS",
								"type": "DatasetReference",
								"parameters": {
									"StorageName": {
										"value": "@pipeline().parameters.TargetStorageName",
										"type": "Expression"
									},
									"DatasetSize": {
										"value": "@pipeline().parameters.DatasetSize",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Create Curated Container",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Source Data To Raw Container",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_DataPrep_Curated_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Sink_DataPrep_Curated_DS",
								"type": "DatasetReference",
								"parameters": {
									"StorageName": {
										"value": "@pipeline().parameters.TargetStorageName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Create Processed Container",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Source Data To Raw Container",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Source_DataPrep_Processed_DS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Sink_DataPrep_Processed_DS",
								"type": "DatasetReference",
								"parameters": {
									"StorageName": {
										"value": "@pipeline().parameters.TargetStorageName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"TargetStorageName": {
						"type": "string"
					},
					"DatasetSize": {
						"type": "string",
						"defaultValue": "1tb"
					}
				},
				"folder": {
					"name": "Data Prep"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/Source_DataPrep_DS')]",
				"[concat(variables('workspaceId'), '/datasets/Sink_DataPrep_DS')]",
				"[concat(variables('workspaceId'), '/datasets/Source_DataPrep_Curated_DS')]",
				"[concat(variables('workspaceId'), '/datasets/Sink_DataPrep_Curated_DS')]",
				"[concat(variables('workspaceId'), '/datasets/Source_DataPrep_Processed_DS')]",
				"[concat(variables('workspaceId'), '/datasets/Sink_DataPrep_Processed_DS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FHIR_Pipeline4Claim_Spark_OC')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "NDJSON_Ingestion_Claim",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Claim_Ingestion_NDJSON2Parquet",
								"type": "NotebookReference"
							},
							"parameters": {
								"StorageName": {
									"value": {
										"value": "@pipeline().parameters.StorageName",
										"type": "Expression"
									},
									"type": "string"
								},
								"DatasetSize": {
									"value": {
										"value": "@pipeline().parameters.DatasetSize",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": {
									"value": "@pipeline().parameters.SparkPoolName",
									"type": "Expression"
								},
								"type": "BigDataPoolReference"
							},
							"executorSize": null,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"driverSize": null,
							"numExecutors": null
						}
					},
					{
						"name": "ClaimParquetFlatten_Large",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "NDJSON_Ingestion_Claim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "ClaimParquetFlatten_Large",
								"type": "NotebookReference"
							},
							"parameters": {
								"StorageName": {
									"value": {
										"value": "@pipeline().parameters.StorageName",
										"type": "Expression"
									},
									"type": "string"
								},
								"DatasetSize": {
									"value": {
										"value": "@pipeline().parameters.DatasetSize",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": {
									"value": "@pipeline().parameters.SparkPoolName",
									"type": "Expression"
								},
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					},
					{
						"name": "ClaimDiagnosis2SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat('fhir/',pipeline().parameters.DatasetSize,'/Claim_diagnosis')",
										"type": "Expression"
									},
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "StorageLS",
									"type": "LinkedServiceReference",
									"parameters": {
										"StorageName": {
											"value": "@pipeline().parameters.StorageName",
											"type": "Expression"
										}
									}
								},
								"path": "staging"
							}
						},
						"inputs": [
							{
								"referenceName": "ClaimDiagnosisParquetLarge",
								"type": "DatasetReference",
								"parameters": {
									"StorageName": {
										"value": "@pipeline().parameters.StorageName",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@concat('fhir/',pipeline().parameters.DatasetSize,'/Claim_diagnosis')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ClaimDiagnosisSQL",
								"type": "DatasetReference",
								"parameters": {
									"DatabaseName": {
										"value": "@pipeline().parameters.DatabaseName",
										"type": "Expression"
									},
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ClaimInsurance2SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat('fhir/',pipeline().parameters.DatasetSize,'/Claim_insurance')",
										"type": "Expression"
									},
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "StorageLS",
									"type": "LinkedServiceReference",
									"parameters": {
										"StorageName": {
											"value": "@pipeline().parameters.StorageName",
											"type": "Expression"
										}
									}
								},
								"path": "staging"
							}
						},
						"inputs": [
							{
								"referenceName": "ClaimInsuranceParquetLarge",
								"type": "DatasetReference",
								"parameters": {
									"StorageName": {
										"value": "@pipeline().parameters.StorageName",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@concat('fhir/',pipeline().parameters.DatasetSize,'/Claim_insurance')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ClaimInsurance",
								"type": "DatasetReference",
								"parameters": {
									"DatabaseName": {
										"value": "@pipeline().parameters.DatabaseName",
										"type": "Expression"
									},
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "ClaimProcedure2SQL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": {
										"value": "@concat('fhir/',pipeline().parameters.DatasetSize,'/Claim_procedure')",
										"type": "Expression"
									},
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "StorageLS",
									"type": "LinkedServiceReference",
									"parameters": {
										"StorageName": {
											"value": "@pipeline().parameters.StorageName",
											"type": "Expression"
										}
									}
								},
								"path": "staging"
							}
						},
						"inputs": [
							{
								"referenceName": "ClaimProcedureParquetLarge",
								"type": "DatasetReference",
								"parameters": {
									"StorageName": {
										"value": "@pipeline().parameters.StorageName",
										"type": "Expression"
									},
									"FolderPath": {
										"value": "@concat('fhir/',pipeline().parameters.DatasetSize,'/Claim_procedure')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ClaimProcedureSQL",
								"type": "DatasetReference",
								"parameters": {
									"DatabaseName": {
										"value": "@pipeline().parameters.DatabaseName",
										"type": "Expression"
									},
									"ServerName": {
										"value": "@pipeline().parameters.ServerName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Create Tables",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ClaimParquetFlatten_Large",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SynapseDedicatedPoolLS",
							"type": "LinkedServiceReference",
							"parameters": {
								"DatabaseName": {
									"value": "@pipeline().parameters.DatabaseName",
									"type": "Expression"
								},
								"ServerName": {
									"value": "@pipeline().parameters.ServerName",
									"type": "Expression"
								}
							}
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name='fhir')\n\tEXEC('CREATE SCHEMA [fhir]')\n\nIF OBJECT_ID('fhir.ClaimDiagnosis') IS NOT NULL\nBEGIN\n    DROP TABLE [fhir].[ClaimDiagnosis]\nEND\n\nCREATE TABLE [fhir].[ClaimDiagnosis]\n( \n\t[Claim_id] [nvarchar](64)  NULL,\n\t[diagnosis_reference] [nvarchar](64)  NULL,\n\t[diagnosis_sequence] [bigint]  NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [Claim_id] ),\n\tCLUSTERED COLUMNSTORE INDEX\n)\n\nIF OBJECT_ID('fhir.ClaimInsurance') IS NOT NULL\nBEGIN\n    DROP TABLE [fhir].[ClaimInsurance]\nEND\n\nCREATE TABLE [fhir].[ClaimInsurance]\n( \n\t[Claim_id] [nvarchar](64)  NULL,\n\t[insurance_coverage.display] [nvarchar](64)  NULL,\n\t[insurance_focal] [bit]  NULL,\n\t[insurance_sequence] [bigint]  NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [Claim_id] ),\n\tCLUSTERED COLUMNSTORE INDEX\n)\n\nIF OBJECT_ID('fhir.ClaimProcedure') IS NOT NULL\nBEGIN\n    DROP TABLE [fhir].[ClaimProcedure]\nEND\n\nCREATE TABLE [fhir].[ClaimProcedure]\n( \n\t[Claim_id] [nvarchar](64)  NULL,\n\t[procedure_reference] [nvarchar](64)  NULL,\n\t[procedure_sequence] [bigint]  NULL\n)\nWITH\n(\n\tDISTRIBUTION = HASH ( [Claim_id] ),\n\tCLUSTERED COLUMNSTORE INDEX\n)"
								}
							]
						}
					},
					{
						"name": "LakeDatabase And Table Creation",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "ClaimParquetFlatten_Large",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Lake Database And Table Creation",
								"type": "NotebookReference"
							},
							"parameters": {
								"StorageName": {
									"value": {
										"value": "@pipeline().parameters.StorageName",
										"type": "Expression"
									},
									"type": "string"
								},
								"DatasetSize": {
									"value": {
										"value": "@pipeline().parameters.DatasetSize",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": {
									"value": "@pipeline().parameters.SparkPoolName",
									"type": "Expression"
								},
								"type": "BigDataPoolReference"
							},
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"StorageName": {
						"type": "string",
						"defaultValue": "rwse2estorage"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "rwse2edefaultsqlpool"
					},
					"ServerName": {
						"type": "string",
						"defaultValue": "rwse2esynapsews"
					},
					"SparkPoolName": {
						"type": "string",
						"defaultValue": "rwse2esparkpool"
					},
					"DatasetSize": {
						"type": "string",
						"defaultValue": "1tb"
					}
				},
				"folder": {
					"name": "Claims"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Claim_Ingestion_NDJSON2Parquet')]",
				"[concat(variables('workspaceId'), '/notebooks/ClaimParquetFlatten_Large')]",
				"[concat(variables('workspaceId'), '/datasets/ClaimDiagnosisParquetLarge')]",
				"[concat(variables('workspaceId'), '/datasets/ClaimDiagnosisSQL')]",
				"[concat(variables('workspaceId'), '/datasets/ClaimInsuranceParquetLarge')]",
				"[concat(variables('workspaceId'), '/datasets/ClaimInsurance')]",
				"[concat(variables('workspaceId'), '/datasets/ClaimProcedureParquetLarge')]",
				"[concat(variables('workspaceId'), '/datasets/ClaimProcedureSQL')]",
				"[concat(variables('workspaceId'), '/linkedServices/SynapseDedicatedPoolLS')]",
				"[concat(variables('workspaceId'), '/notebooks/Lake Database And Table Creation')]",
				"[concat(variables('workspaceId'), '/linkedServices/StorageLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ClaimDiagnosisParquetLarge')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "StorageLS",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageName": {
							"value": "@dataset().StorageName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"StorageName": {
						"type": "string"
					},
					"FolderPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "UTF8"
					},
					{
						"name": "resourceType",
						"type": "UTF8"
					},
					{
						"name": "status",
						"type": "UTF8"
					},
					{
						"name": "billablePeriod_end",
						"type": "UTF8"
					},
					{
						"name": "billablePeriod_start",
						"type": "UTF8"
					},
					{
						"name": "created",
						"type": "UTF8"
					},
					{
						"name": "patient_display",
						"type": "UTF8"
					},
					{
						"name": "patient_reference",
						"type": "UTF8"
					},
					{
						"name": "prescription_reference",
						"type": "UTF8"
					},
					{
						"name": "provider_display",
						"type": "UTF8"
					},
					{
						"name": "provider_reference",
						"type": "UTF8"
					},
					{
						"name": "total_currency",
						"type": "UTF8"
					},
					{
						"name": "total_value",
						"type": "DOUBLE"
					},
					{
						"name": "use",
						"type": "UTF8"
					},
					{
						"name": "display",
						"type": "UTF8"
					},
					{
						"name": "focal",
						"type": "BOOLEAN"
					},
					{
						"name": "sequence",
						"type": "INT64"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/StorageLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ClaimDiagnosisSQL')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SynapseDedicatedPoolLS",
					"type": "LinkedServiceReference",
					"parameters": {
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						},
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"DatabaseName": {
						"type": "string"
					},
					"ServerName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "fhir",
					"table": "ClaimDiagnosis"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SynapseDedicatedPoolLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ClaimInsurance')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SynapseDedicatedPoolLS",
					"type": "LinkedServiceReference",
					"parameters": {
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						},
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"DatabaseName": {
						"type": "string"
					},
					"ServerName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "fhir",
					"table": "ClaimInsurance"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SynapseDedicatedPoolLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ClaimInsuranceParquetLarge')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "StorageLS",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageName": {
							"value": "@dataset().StorageName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"StorageName": {
						"type": "string"
					},
					"FolderPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "*",
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "UTF8"
					},
					{
						"name": "resourceType",
						"type": "UTF8"
					},
					{
						"name": "status",
						"type": "UTF8"
					},
					{
						"name": "billablePeriod_end",
						"type": "UTF8"
					},
					{
						"name": "billablePeriod_start",
						"type": "UTF8"
					},
					{
						"name": "created",
						"type": "UTF8"
					},
					{
						"name": "patient_display",
						"type": "UTF8"
					},
					{
						"name": "patient_reference",
						"type": "UTF8"
					},
					{
						"name": "prescription_reference",
						"type": "UTF8"
					},
					{
						"name": "provider_display",
						"type": "UTF8"
					},
					{
						"name": "provider_reference",
						"type": "UTF8"
					},
					{
						"name": "total_currency",
						"type": "UTF8"
					},
					{
						"name": "total_value",
						"type": "DOUBLE"
					},
					{
						"name": "use",
						"type": "UTF8"
					},
					{
						"name": "display",
						"type": "UTF8"
					},
					{
						"name": "focal",
						"type": "BOOLEAN"
					},
					{
						"name": "sequence",
						"type": "INT64"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/StorageLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ClaimProcedureParquetLarge')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "StorageLS",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageName": {
							"value": "@dataset().StorageName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"StorageName": {
						"type": "string"
					},
					"FolderPath": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "*",
						"folderPath": {
							"value": "@dataset().FolderPath",
							"type": "Expression"
						},
						"fileSystem": "curated"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "UTF8"
					},
					{
						"name": "resourceType",
						"type": "UTF8"
					},
					{
						"name": "status",
						"type": "UTF8"
					},
					{
						"name": "billablePeriod_end",
						"type": "UTF8"
					},
					{
						"name": "billablePeriod_start",
						"type": "UTF8"
					},
					{
						"name": "created",
						"type": "UTF8"
					},
					{
						"name": "patient_display",
						"type": "UTF8"
					},
					{
						"name": "patient_reference",
						"type": "UTF8"
					},
					{
						"name": "prescription_reference",
						"type": "UTF8"
					},
					{
						"name": "provider_display",
						"type": "UTF8"
					},
					{
						"name": "provider_reference",
						"type": "UTF8"
					},
					{
						"name": "total_currency",
						"type": "UTF8"
					},
					{
						"name": "total_value",
						"type": "DOUBLE"
					},
					{
						"name": "use",
						"type": "UTF8"
					},
					{
						"name": "reference",
						"type": "UTF8"
					},
					{
						"name": "sequence",
						"type": "INT64"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/StorageLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ClaimProcedureSQL')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SynapseDedicatedPoolLS",
					"type": "LinkedServiceReference",
					"parameters": {
						"DatabaseName": {
							"value": "@dataset().DatabaseName",
							"type": "Expression"
						},
						"ServerName": {
							"value": "@dataset().ServerName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"DatabaseName": {
						"type": "string"
					},
					"ServerName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "fhir",
					"table": "ClaimProcedure"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SynapseDedicatedPoolLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sink_DataPrep_Curated_DS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "StorageLS",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageName": {
							"value": "@dataset().StorageName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"StorageName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "curated"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/StorageLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sink_DataPrep_DS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "StorageLS",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageName": {
							"value": "@dataset().StorageName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"StorageName": {
						"type": "string"
					},
					"DatasetSize": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('fhir_ndjson/', dataset().DatasetSize)",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/StorageLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sink_DataPrep_Processed_DS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "StorageLS",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageName": {
							"value": "@dataset().StorageName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"StorageName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "processed"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/StorageLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Source_DataPrep_Curated_DS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Source_Dataset_LS",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageWithSaSUrl": {
							"value": "@concat('https://medicaldl.blob.core.windows.net/source?sp=rl&st=2022-09-26T19:45:24Z&se=2032-09-27T03:45:24Z&spr=https&sv=2021-06-08&sr=c&sig=7MfRCnqvmJ7E24OJnTi51pmYN9FVO28XYjpXR6LhVRo%3D')",
							"type": "Expression"
						}
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Create_Curated.txt",
						"container": "source"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Source_Dataset_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Source_DataPrep_DS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Source_Dataset_LS",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageWithSaSUrl": {
							"value": "@concat('https://medicaldl.blob.core.windows.net/source?sp=rl&st=2022-09-26T19:45:24Z&se=2032-09-27T03:45:24Z&spr=https&sv=2021-06-08&sr=c&sig=7MfRCnqvmJ7E24OJnTi51pmYN9FVO28XYjpXR6LhVRo%3D')",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"DatasetSize": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().DatasetSize",
							"type": "Expression"
						},
						"container": "source"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Source_Dataset_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Source_DataPrep_Processed_DS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Source_Dataset_LS",
					"type": "LinkedServiceReference",
					"parameters": {
						"StorageWithSaSUrl": {
							"value": "@concat('https://medicaldl.blob.core.windows.net/source?sp=rl&st=2022-09-26T19:45:24Z&se=2032-09-27T03:45:24Z&spr=https&sv=2021-06-08&sr=c&sig=7MfRCnqvmJ7E24OJnTi51pmYN9FVO28XYjpXR6LhVRo%3D')",
							"type": "Expression"
						}
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Create_Processed.txt",
						"container": "source"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Source_Dataset_LS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Source_Dataset_LS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"StorageWithSaSUrl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('Source_Dataset_LS_sasUri')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/StorageLS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"StorageName": {
						"type": "string",
						"defaultValue": "rwse2estorage"
					}
				},
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('StorageLS_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SynapseDedicatedPoolLS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DatabaseName": {
						"type": "string",
						"defaultValue": "rwse2edefaultsqlpool"
					},
					"ServerName": {
						"type": "string",
						"defaultValue": "rwse2esynapsews"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('SynapseDedicatedPoolLS_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rwse2esynapsews-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('rwse2esynapsews-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rwse2esynapsews-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('rwse2esynapsews-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ClaimParquetFlatten_Large')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Claims"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "rwse2esparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b6e81c50-ab2c-44ee-b8c7-3fe0987ebe32"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fd0d9e7a-b5dc-46f5-8d1d-a694d10dd09f/resourceGroups/rgrwse2edemo/providers/Microsoft.Synapse/workspaces/rwse2esynapsews/bigDataPools/rwse2esparkpool",
						"name": "rwse2esparkpool",
						"type": "Spark",
						"endpoint": "https://rwse2esynapsews.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/rwse2esparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 5,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 180
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"StorageName = \"rwse2estorage\"\r\n",
							"DatasetSize = \"1tb\""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"curated_location = \"abfss://curated@\" + StorageName + \".dfs.core.windows.net/fhir/\"+ DatasetSize +\"/\"\r\n",
							"processed_location = \"abfss://processed@\" + StorageName + \".dfs.core.windows.net/fhir/\"+ DatasetSize +\"/\"\r\n",
							"write_mode=\"overwrite\""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Claim_df=spark.read.parquet(processed_location+\"Claim/\")"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(Claim_df.limit(10))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Claim_df.printSchema()"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import explode\r\n",
							"from pyspark.sql.functions import regexp_replace\r\n",
							"\r\n",
							"Claim_main_explode_df = Claim_df.select(\r\n",
							"    \"id\",\"resourceType\",\"status\",\"billablePeriod.end\",\"billablePeriod.start\",\"created\",\"patient.display\",\"patient.reference\",\r\n",
							"    \"prescription.reference\",\"provider.display\",\"provider.reference\",\"total.currency\",\"total.value\",\"use\")\r\n",
							"\r\n",
							"#use toDF() to rename the columns\r\n",
							"Claim_main_df= Claim_main_explode_df.toDF(*( \r\n",
							"    \"Claim_id\",\"resourceType\",\"status\",\"billablePeriod_end\",\"billablePeriod_start\",\"created\",\r\n",
							"    \"patient_display\",\"patient_id_reference\",\r\n",
							"    \"prescription_reference\",\"provider_display\",\"provider_org_id_reference\",\"total_currency\",\"total_value\",\"use\"))\r\n",
							"\r\n",
							"Claim_main_df = Claim_main_df.withColumn(\"patient_id_reference\",regexp_replace(\"patient_id_reference\",\"Patient/\",\"\")).withColumn(\r\n",
							"    \"provider_org_id_reference\",regexp_replace(\"provider_org_id_reference\",\"Organization/\",\"\"))\r\n",
							"\r\n",
							"\r\n",
							"# adding schema optimization\r\n",
							"# Arshad"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Claim_main_df.printSchema()"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(Claim_main_df.limit(10))"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Claim_main_df.count()"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Claim_main_df.write.mode(write_mode).parquet(curated_location+\"Claim_main/\")"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import explode\r\n",
							"\r\n",
							"Claim_insurance_explode_df = Claim_df.select(\"id\", explode(Claim_df.insurance))\r\n",
							"\r\n",
							"#use toDF() to rename the columns\r\n",
							"Claim_insurance_df= Claim_insurance_explode_df.toDF(*( \"Claim_id\",\"insurance\"))\r\n",
							"\r\n",
							"Claim_insurance_df = Claim_insurance_df.select(\r\n",
							"    \"Claim_id\",\"insurance.coverage.display\",\"insurance.focal\",\"insurance.sequence\"\r\n",
							" ).toDF(*(   \r\n",
							"    \"Claim_id\",\"insurance_coverage.display\",\"insurance_focal\",\"insurance_sequence\" ))\r\n",
							"\r\n",
							"#    base_df_explode = base_df.select(explode(base_df.entry))"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Claim_insurance_df.printSchema()"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(Claim_insurance_df.limit(10))"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Claim_insurance_df.count()"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Claim_insurance_df.write.mode(write_mode).parquet(curated_location+\"Claim_insurance/\")"
						],
						"outputs": [],
						"execution_count": 17
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import explode\r\n",
							"from pyspark.sql.functions import regexp_replace\r\n",
							"\r\n",
							"Claim_diagnosis_explode_df = Claim_df.select(\r\n",
							"    \"id\",  explode(Claim_df.diagnosis))\r\n",
							"\r\n",
							"#use toDF() to rename the columns\r\n",
							"Claim_diagnosis_df= Claim_diagnosis_explode_df.toDF(*( \"id\", \"diagnosis\"))\r\n",
							"\r\n",
							"Claim_diagnosis_df = Claim_diagnosis_df.select(\r\n",
							"    \"id\",\"diagnosis.diagnosisReference.reference\",\"diagnosis.sequence\"\r\n",
							" ).toDF(*(  \r\n",
							"    \"Claim_id\",\"diagnosis_reference\",\"diagnosis_sequence\"))\r\n",
							"Claim_diagnosis_df=Claim_diagnosis_df.withColumn(\r\n",
							"    \"diagnosis_reference\",regexp_replace(\"diagnosis_reference\",\"Condition/\",\"\"))    "
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Claim_diagnosis_df.printSchema()"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Claim_diagnosis_df.write.mode(write_mode).parquet(curated_location+\"Claim_diagnosis/\")"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import explode\r\n",
							"from pyspark.sql.functions import regexp_replace\r\n",
							"\r\n",
							"Claim_procedure_explode_df = Claim_df.select(\"id\",explode(Claim_df.procedure))\r\n",
							"\r\n",
							"#use toDF() to rename the columns\r\n",
							"Claim_procedure_df= Claim_procedure_explode_df.toDF(*( \"id\",\"procedure\"))\r\n",
							"\r\n",
							"Claim_procedure_df = Claim_procedure_df.select(\r\n",
							"    \"id\",\"procedure.procedureReference.reference\",\"procedure.sequence\"\r\n",
							" ).toDF(*(\r\n",
							"    \"Claim_id\",\"procedure_reference\",\"procedure_sequence\"))\r\n",
							"Claim_procedure_df=Claim_procedure_df.withColumn(\"procedure_reference\",regexp_replace(\"procedure_reference\",\"Procedure/\",\"\"))"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(Claim_procedure_df.limit(10))"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Claim_procedure_df.write.mode(write_mode).parquet(curated_location+\"Claim_procedure/\")"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#Claim_procedure_df.write.format(\"delta\").save(curated_location+\"Claim_procedure_delta/\")\r\n",
							"#Claim_diagnosis_df.write.format(\"delta\").save(curated_location+\"Claim_diagnosis_delta/\")\r\n",
							"#Claim_insurance_df.write.format(\"delta\").save(curated_location+\"Claim_insurance_delta/\")"
						],
						"outputs": [],
						"execution_count": 11
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Claim_Ingestion_NDJSON2Parquet')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Claims"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "rwse2esparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "9d5052cc-6aa0-41eb-a9f2-42be471b3c4d"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fd0d9e7a-b5dc-46f5-8d1d-a694d10dd09f/resourceGroups/rgrwse2edemo/providers/Microsoft.Synapse/workspaces/rwse2esynapsews/bigDataPools/rwse2esparkpool",
						"name": "rwse2esparkpool",
						"type": "Spark",
						"endpoint": "https://rwse2esynapsews.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/rwse2esparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 5,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"StorageName = \"rwse2estorage\"\r\n",
							"DatasetSize = \"1tb\""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"raw_location = \"abfss://raw@\" + StorageName + \".dfs.core.windows.net/fhir_ndjson/\"+ DatasetSize +\"/*/\"\r\n",
							"processed_location = \"abfss://processed@\" + StorageName+ \".dfs.core.windows.net/fhir/\"+ DatasetSize +\"/\"\r\n",
							"write_mode=\"overwrite\""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Claim_df = spark.read.option(\"multiline\", \"false\").json(raw_location+\"Claim.ndjson\")\r\n",
							"Claim_df.write.mode(write_mode).parquet(processed_location+\"Claim/\")\r\n",
							"#display(Claim_df.limit(10))\r\n",
							"#Claim_df.count()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Lake Database And Table Creation')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Exploration"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "rwse2esparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "fa311c3a-535f-4730-ad86-cd5de390ee95"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fd0d9e7a-b5dc-46f5-8d1d-a694d10dd09f/resourceGroups/rgrwse2edemo/providers/Microsoft.Synapse/workspaces/rwse2esynapsews/bigDataPools/rwse2esparkpool",
						"name": "rwse2esparkpool",
						"type": "Spark",
						"endpoint": "https://rwse2esynapsews.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/rwse2esparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 5,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"StorageName = \"rwse2estorage\"\r\n",
							"DatasetSize = \"1tb\""
						],
						"outputs": [],
						"execution_count": 36
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"DROP DATABASE IF EXISTS fhirdbexploration CASCADE;\r\n",
							"CREATE DATABASE fhirdbexploration;"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"USE fhirdbexploration"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"curated_location = \"abfss://curated@\" + StorageName + \".dfs.core.windows.net/fhir/\"+ DatasetSize +\"/\""
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"claimDiagonisLocation = curated_location + \"Claim_diagnosis/\"\r\n",
							"spark.conf.set('claimDiagonisLocation',claimDiagonisLocation)\r\n",
							"\r\n",
							"claimInsuranceLocation = curated_location + \"Claim_insurance/\"\r\n",
							"spark.conf.set('claimInsuranceLocation',claimInsuranceLocation)\r\n",
							"\r\n",
							"claimProcedureLocation = curated_location + \"Claim_procedure/\"\r\n",
							"spark.conf.set('claimProcedureLocation',claimProcedureLocation)"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"DROP TABLE IF EXISTS fhirdbexploration.claimdiagnosis;\r\n",
							"CREATE TABLE fhirdbexploration.claimdiagnosis USING PARQUET LOCATION '${claimDiagonisLocation}';\r\n",
							"\r\n",
							"DROP TABLE IF EXISTS fhirdbexploration.claiminsurance;\r\n",
							"CREATE TABLE fhirdbexploration.claiminsurance USING PARQUET LOCATION '${claimInsuranceLocation}';\r\n",
							"\r\n",
							"DROP TABLE IF EXISTS fhirdbexploration.claimprocedure;\r\n",
							"CREATE TABLE fhirdbexploration.claimprocedure USING PARQUET LOCATION '${claimProcedureLocation}';"
						],
						"outputs": [],
						"execution_count": 35
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Observation_Ingestion_NDJSON2Parquet')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Observation"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "rwse2esparkpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "3501ce1a-4b3e-4f45-800d-fb174bac62c7"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/fd0d9e7a-b5dc-46f5-8d1d-a694d10dd09f/resourceGroups/rgrwse2edemo/providers/Microsoft.Synapse/workspaces/rwse2esynapsews/bigDataPools/rwse2esparkpool",
						"name": "rwse2esparkpool",
						"type": "Spark",
						"endpoint": "https://rwse2esynapsews.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/rwse2esparkpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 5,
						"cores": 4,
						"memory": 28,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"StorageName = \"rwse2estorage\"\r\n",
							"DatasetSize = \"1tb\""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"raw_location = \"abfss://raw@\" + StorageName + \".dfs.core.windows.net/fhir_ndjson/\"+ DatasetSize +\"/*/\"\r\n",
							"processed_location = \"abfss://processed@\" + StorageName + \".dfs.core.windows.net/fhir/\"+ DatasetSize +\"/\"\r\n",
							"write_mode=\"overwrite\""
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"Observation_df = spark.read.option(\"multiline\", \"false\").json(raw_location+\"Observation.ndjson\")\r\n",
							"Observation_df.write.mode(write_mode).parquet(processed_location+\"Observation/\")\r\n",
							"#display(Observation_df.limit(10))\r\n",
							"#Observation_df.count()"
						],
						"outputs": [],
						"execution_count": 3
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rwse2esparkpool')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 5,
					"minNodeCount": 3
				},
				"nodeCount": 5,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "northeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/rwse2edefaultsqlpool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "northeurope"
		}
	]
}